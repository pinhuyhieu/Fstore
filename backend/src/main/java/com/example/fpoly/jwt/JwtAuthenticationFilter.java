package com.example.fpoly.jwt;

import com.example.fpoly.security.JwtUtil;
import com.example.fpoly.security.UserDetailsServiceImpl;
import io.jsonwebtoken.ExpiredJwtException;
import io.jsonwebtoken.MalformedJwtException;
import io.jsonwebtoken.SignatureException;
import jakarta.servlet.FilterChain;
import jakarta.servlet.ServletException;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import lombok.RequiredArgsConstructor;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.stereotype.Component;
import org.springframework.web.filter.OncePerRequestFilter;

import java.io.IOException;

@Component
@RequiredArgsConstructor
public class JwtAuthenticationFilter extends OncePerRequestFilter {

    private static final Logger logger = LoggerFactory.getLogger(JwtAuthenticationFilter.class);

    private final JwtUtil jwtUtil;
    private final UserDetailsServiceImpl userDetailsService;

    @Override
    protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain)
            throws ServletException, IOException {
        try {
            String requestPath = request.getServletPath();
            logger.info("üîç Request Path: {}", requestPath);

            // ‚úÖ B·ªè qua ki·ªÉm tra JWT cho API ƒëƒÉng nh·∫≠p, ƒëƒÉng k√Ω
            if (requestPath.startsWith("/login") || requestPath.startsWith("/doLogin") ||requestPath.startsWith("/api/payment/vnpay-return") ||
                    requestPath.startsWith("/register") || requestPath.startsWith("/doRegister") || requestPath.startsWith("/favicon.ico"))

            {
                logger.info("‚úÖ B·ªè qua JWT ki·ªÉm tra cho: {}", requestPath);
                filterChain.doFilter(request, response);
                return;
            }

            // üîπ L·∫•y token t·ª´ request header
            String token = extractToken(request);
            if (token == null) {
                logger.warn("‚ùå Kh√¥ng t√¨m th·∫•y Token ho·∫∑c sai ƒë·ªãnh d·∫°ng");
                filterChain.doFilter(request, response);
                return;
            }

            logger.info("üîπ Token nh·∫≠n ƒë∆∞·ª£c: {}", token);

            // üîπ L·∫•y username t·ª´ token
            String username = jwtUtil.extractUsername(token);
            logger.info("üîπ Username t·ª´ Token: {}", username);

            // ‚úÖ Ki·ªÉm tra n·∫øu user ch∆∞a ƒë∆∞·ª£c x√°c th·ª±c
            if (username != null && SecurityContextHolder.getContext().getAuthentication() == null) {
                UserDetails userDetails = userDetailsService.loadUserByUsername(username);
                logger.info("‚úÖ User t√¨m th·∫•y: {}", userDetails.getUsername());

                if (jwtUtil.validateToken(token, userDetails)) {
                    UsernamePasswordAuthenticationToken authenticationToken =
                            new UsernamePasswordAuthenticationToken(userDetails, null, userDetails.getAuthorities());
                    SecurityContextHolder.getContext().setAuthentication(authenticationToken);
                    logger.info("‚úÖ X√°c th·ª±c th√†nh c√¥ng: {}", userDetails.getUsername());
                } else {
                    logger.warn("‚ùå Token kh√¥ng h·ª£p l·ªá");
                }
            }

            filterChain.doFilter(request, response);
        } catch (ExpiredJwtException e) {
            logger.error("JWT Token ƒë√£ h·∫øt h·∫°n: {}", e.getMessage());
            response.setStatus(HttpServletResponse.SC_UNAUTHORIZED);
            response.getWriter().write("JWT Token ƒë√£ h·∫øt h·∫°n: " + e.getMessage());
        } catch (MalformedJwtException | SignatureException e) {
            logger.error("JWT Token kh√¥ng h·ª£p l·ªá: {}", e.getMessage());
            response.setStatus(HttpServletResponse.SC_UNAUTHORIZED);
            response.getWriter().write("JWT Token kh√¥ng h·ª£p l·ªá: " + e.getMessage());
        } catch (Exception e) {
            logger.error("JWT authentication error: {}", e.getMessage());
            response.setStatus(HttpServletResponse.SC_UNAUTHORIZED);
            response.getWriter().write("JWT authentication error: " + e.getMessage());
        }
    }

    private String extractToken(HttpServletRequest request) {
        String authHeader = request.getHeader("Authorization");
        if (authHeader != null && authHeader.startsWith("Bearer ")) {
            return authHeader.substring(7);
        }
        return null;
    }
}