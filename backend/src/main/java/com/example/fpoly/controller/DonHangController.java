package com.example.fpoly.controller;

import com.example.fpoly.config.VNPayConfig;
import com.example.fpoly.entity.*;

import com.example.fpoly.enums.PhuongThucCode;
import com.example.fpoly.enums.TrangThaiDonHang;
import com.example.fpoly.enums.TrangThaiThanhToan;
import com.example.fpoly.service.*;
import com.example.fpoly.util.TrangThaiValidator;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpSession;
import lombok.RequiredArgsConstructor;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.security.core.annotation.AuthenticationPrincipal;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.List;
import java.util.Optional;

@Controller
@RequestMapping("/api/donhang")
@RequiredArgsConstructor
public class DonHangController {

    private final DonHangService donHangService;
    private final UserService userService;
    private final PhuongThucThanhToanService phuongThucThanhToanService;
    private final GioHangService gioHangService;
    private final GioHangChiTietService gioHangChiTietService;
    @Autowired
    private LichSuTrangThaiService lichSuTrangThaiService;
    @Autowired
    private VNPayConfig vnPayConfig;
    @Autowired
    private SanPhamCTService sanPhamCTService;
    @Autowired
    private DiaChiNguoiDungService diaChiNguoiDungService;
    @Autowired
    private MaGiamGiaService maGiamGiaService;


    // üîπ L·∫•y danh s√°ch ƒë∆°n h√†ng c·ªßa user
    @GetMapping
    public ResponseEntity<List<DonHang>> getOrdersByUser(@AuthenticationPrincipal UserDetails userDetails) {
        User user = userService.findByUsername(userDetails.getUsername())
                .orElseThrow(() -> new RuntimeException("‚ùå Kh√¥ng t√¨m th·∫•y user"));

        List<DonHang> donHangs = donHangService.getOrdersByUser(user);
        return ResponseEntity.ok(donHangs);
    }

    // üîπ L·∫•y chi ti·∫øt ƒë∆°n h√†ng theo ID
    @GetMapping("/{id}")
    public ResponseEntity<DonHang> getOrderById(@PathVariable Integer id) {
        Optional<DonHang> donHang = donHangService.getOrderById(id);
        return donHang.map(ResponseEntity::ok)
                .orElseGet(() -> ResponseEntity.notFound().build());
    }

    // ‚ûï T·∫°o ƒë∆°n h√†ng m·ªõi
//    @PostMapping("/create")
//    public ResponseEntity<DonHang> createOrder(@AuthenticationPrincipal UserDetails userDetails, @RequestBody DonHang donHang) {
//        User user = userService.findByUsername(userDetails.getUsername())
//                .orElseThrow(() -> new RuntimeException("‚ùå Kh√¥ng t√¨m th·∫•y user"));
//
//        donHang.setUser(user);
//        DonHang newOrder = donHangService.createOrder(donHang);
//        return ResponseEntity.ok(newOrder);
//    }
    @Autowired
    private EmailService emailService;
    @Autowired
    private ThanhToanService thanhToanService;
    // ‚ûï T·∫°o ƒë∆°n h√†ng m·ªõi
    @PostMapping("/dat-hang")
    public String datHang(@AuthenticationPrincipal UserDetails userDetails,
                          @RequestParam Integer phuongThucThanhToanId,
                          @ModelAttribute DonHang donHang,
                          HttpSession session,
                          RedirectAttributes redirectAttributes) {

        // üîê L·∫•y th√¥ng tin user
        User user = userService.findByUsername(userDetails.getUsername())
                .orElseThrow(() -> new RuntimeException("Kh√¥ng t√¨m th·∫•y user"));

        // üí≥ L·∫•y ph∆∞∆°ng th·ª©c thanh to√°n
        PhuongThucThanhToan phuongThucThanhToan = phuongThucThanhToanService.findById(phuongThucThanhToanId)
                .orElseThrow(() -> new RuntimeException("Kh√¥ng t√¨m th·∫•y ph∆∞∆°ng th·ª©c thanh to√°n"));

        // üõí L·∫•y gi·ªè h√†ng c·ªßa user
        GioHang gioHang = gioHangService.getGioHangByUser(user);
        List<GioHangChiTiet> gioHangChiTiets = gioHangChiTietService.getCartDetails(gioHang);

        if (gioHangChiTiets == null || gioHangChiTiets.isEmpty()) {
            redirectAttributes.addFlashAttribute("error", "‚ùå Gi·ªè h√†ng c·ªßa b·∫°n ƒëang tr·ªëng!");
            return "redirect:/sanpham/list";
        }

        // üîÅ Map sang chi ti·∫øt ƒë∆°n h√†ng
        List<ChiTietDonHang> chiTietList = gioHangChiTiets.stream().map(item -> {
            ChiTietDonHang ct = new ChiTietDonHang();
            ct.setSanPhamChiTiet(item.getSanPhamChiTiet());
            ct.setSoLuong(item.getSoLuong());
            ct.setGiaBan(item.getGiaTaiThoiDiemThem());
            return ct;
        }).toList();

        chiTietList.forEach(ct -> ct.setDonHang(donHang));
        donHang.setChiTietDonHangList(chiTietList);

        // üí∞ T√≠nh t·ªïng ti·ªÅn h√†ng
        double tongTien = chiTietList.stream()
                .mapToDouble(ct -> ct.getGiaBan().doubleValue() * ct.getSoLuong())
                .sum();
        // üîª T√≠nh s·ªë ti·ªÅn gi·∫£m n·∫øu c√≥ m√£
        Float soTienGiam = 0f;

        MaGiamGia maGiamGia = donHang.getMaGiamGia();
        System.out.println("üîç DonHang g·ª≠i l√™n c√≥ maGiamGia: " + donHang.getMaGiamGia());
        System.out.println("üîç maGiamGia ID: " + (donHang.getMaGiamGia() != null ? donHang.getMaGiamGia().getId() : "null"));
        if (maGiamGia != null) {
            // Truy v·∫•n l·∫°i t·ª´ DB ƒë·ªÉ ƒë·∫£m b·∫£o th√¥ng tin c·∫≠p nh·∫≠t
            maGiamGia = maGiamGiaService.findById(maGiamGia.getId()).orElse(null);


            if (maGiamGia != null) {
                boolean hopLe = (Boolean.TRUE.equals(maGiamGia.getKichHoat())) &&
                        (maGiamGia.getNgayBatDau().isBefore(LocalDate.now())) &&
                        (maGiamGia.getNgayKetThuc().isAfter(LocalDate.now())) &&
                        (maGiamGia.getSoLuong() == null || maGiamGia.getSoLuong() > 0) &&
                        (maGiamGia.getGiaTriToiThieu() == null || tongTien >= maGiamGia.getGiaTriToiThieu());

                if (hopLe) {
                    if (maGiamGia.getSoTienGiam() != null) {
                        soTienGiam = maGiamGia.getSoTienGiam();
                    } else if (maGiamGia.getPhanTramGiam() != null) {
                        soTienGiam = (float) (tongTien * maGiamGia.getPhanTramGiam() / 100.0);
                    }
                }
            }
        }

// üìù G√°n v√†o ƒë∆°n h√†ng
        donHang.setSoTienGiam(soTienGiam);


        // üöö T√≠nh ph√≠ ship
        int tongSoLuong = chiTietList.stream().mapToInt(ChiTietDonHang::getSoLuong).sum();
        int toDistrictId;
        try {
            toDistrictId = Integer.parseInt(donHang.getQuanHuyen());
        } catch (NumberFormatException e) {
            redirectAttributes.addFlashAttribute("error", "‚ùå Qu·∫≠n/Huy·ªán kh√¥ng h·ª£p l·ªá!");
            return "redirect:/sanpham/list";
        }

        int phiShip = ghnService.tinhTienShipTheoSoLuong(tongSoLuong, toDistrictId, donHang.getPhuongXa(), (int) tongTien);

        // üìù G√°n th√¥ng tin ƒë∆°n h√†ng
        donHang.setUser(user);
        donHang.setPhuongThucThanhToan(phuongThucThanhToan);
        donHang.setTrangThai(TrangThaiDonHang.CHO_XAC_NHAN);
        donHang.setPhiShip(phiShip);
        donHang.setSoTienGiam(soTienGiam); // ‚ö†Ô∏è G·ªåI L·∫†I ·ªü ƒë√¢y ‚Äî ƒë·ªÉ ƒë·∫£m b·∫£o ch·∫Øc ch·∫Øn


        // üíæ L∆∞u ƒë∆°n h√†ng v√† chi ti·∫øt
        DonHang newOrder = donHangService.tienHanhDatHang(user, donHang, session);
        lichSuTrangThaiService.ghiLichSu(newOrder, TrangThaiDonHang.CHO_XAC_NHAN, "Kh·ªüi t·∫°o ƒë∆°n h√†ng");

        // üí≥ T·∫°o thanh to√°n
        ThanhToan thanhToan = new ThanhToan();
        thanhToan.setDonHang(newOrder);
        thanhToan.setPhuongThucThanhToan(phuongThucThanhToan);
        thanhToan.setSoTien(newOrder.getTongTien());
        thanhToan.setTrangThaiThanhToan(TrangThaiThanhToan.CHUA_THANH_TOAN);
        System.out.println("üéØ ƒê√£ set m√£ gi·∫£m gi√°: " + donHang.getMaGiamGia());
        System.out.println("üéØ ID m√£ gi·∫£m gi√°: " +
                (donHang.getMaGiamGia() != null ? donHang.getMaGiamGia().getId() : "null"));
        thanhToanService.save(thanhToan);

        // üåê N·∫øu ch·ªçn VNPay th√¨ chuy·ªÉn h∆∞·ªõng
        if (phuongThucThanhToan.getPhuongThucCode() == PhuongThucCode.VNPAY) {
            try {
                String url = vnPayConfig.createPaymentUrl(
                        (long) (newOrder.getTongTien() * 100),
                        "Thanh to√°n ƒë∆°n h√†ng #" + newOrder.getId(),
                        newOrder.getId().toString()
                );
                return "redirect:" + url;
            } catch (Exception e) {
                redirectAttributes.addFlashAttribute("error", "‚ùå L·ªói t·∫°o link thanh to√°n VNPay: " + e.getMessage());
                return "redirect:/sanpham/list";
            }
        }
        System.out.println("üßæ T·ªïng ti·ªÅn h√†ng: " + tongTien);
        System.out.println("üéÅ Gi·∫£m gi√°: " + soTienGiam);
        System.out.println("üöö Ph√≠ ship: " + phiShip);
        System.out.println("üíµ DonHang.soTienGiam = " + donHang.getSoTienGiam());




        // ‚úÖ Xo√° m√£ gi·∫£m gi√° kh·ªèi session sau khi ƒë·∫∑t h√†ng
        session.removeAttribute("maGiamGiaNguoiDung");
        session.removeAttribute("soTienGiam");

        // üìß G·ª≠i th√¥ng b√°o
        emailService.sendOrderConfirmationEmail(user.getEmail(), newOrder.getId().toString());
        redirectAttributes.addFlashAttribute("successMessage", "‚úÖ ƒê·∫∑t h√†ng th√†nh c√¥ng!");
        return "redirect:/api/donhang/xac-nhan?id=" + newOrder.getId();
    }




    @GetMapping("/xac-nhan")
    public String showConfirmation(Model model, @RequestParam Integer id) {
        DonHang donHang = donHangService.getOrderById(id)
                .orElseThrow(() -> new RuntimeException("‚ùå ƒê∆°n h√†ng kh√¥ng t·ªìn t·∫°i."));
        model.addAttribute("donHang", donHang);
        return "xac-nhan";
    }


    // üóë X√≥a ƒë∆°n h√†ng
    @DeleteMapping("/delete/{id}")
    public ResponseEntity<String> deleteOrder(@PathVariable Integer id) {
        donHangService.deleteOrder(id);
        return ResponseEntity.ok("‚úÖ ƒê√£ x√≥a ƒë∆°n h√†ng th√†nh c√¥ng.");
    }
    @GetMapping("/danh-sach")
    public String danhSachDonHang(
            Model model,
            @AuthenticationPrincipal UserDetails userDetails,
            @RequestParam(defaultValue = "1") int page,
            @RequestParam(defaultValue = "") String keyword
    ) {
        User user = userService.findByUsername(userDetails.getUsername())
                .orElseThrow(() -> new RuntimeException("‚ùå Kh√¥ng t√¨m th·∫•y user"));

        List<DonHang> donHangs = donHangService.getOrdersByUser(user);

        // üîç T√¨m ki·∫øm theo m√£ ƒë∆°n h√†ng
        if (!keyword.isEmpty()) {
            donHangs = donHangs.stream()
                    .filter(dh -> String.valueOf(dh.getId()).contains(keyword))
                    .toList();
        }

        // üî¢ Ph√¢n trang
        int pageSize = 10;
        int totalItems = donHangs.size();
        int totalPages = (int) Math.ceil((double) totalItems / pageSize);
        int fromIndex = (page - 1) * pageSize;
        int toIndex = Math.min(fromIndex + pageSize, totalItems);
        List<DonHang> paginated = donHangs.subList(fromIndex, toIndex);

        // üîÑ G√°n th√¥ng tin thanh to√°n
        for (DonHang dh : paginated) {
            thanhToanService.findByDonHangId(dh.getId()).ifPresent(dh::setThanhToan);
        }

        // üì¶ G·ª≠i v·ªÅ view
        model.addAttribute("donHangs", paginated);
        model.addAttribute("currentPage", page);
        model.addAttribute("totalPages", totalPages);
        model.addAttribute("keyword", keyword);

        return "danh-sach-don-hang";
    }


    @Autowired
    private GHNService ghnService;

    @GetMapping("/chi-tiet/{id}")
    public String chiTietDonHang(@PathVariable Integer id, Model model, HttpServletRequest request) {
        // üîπ T√¨m ƒë∆°n h√†ng theo ID t·ª´ database
        DonHang donHang = donHangService.getOrderById(id)
                .orElseThrow(() -> new RuntimeException("‚ùå ƒê∆°n h√†ng kh√¥ng t·ªìn t·∫°i."));

        // üîπ L·∫•y t√™n ƒë·ªãa ch·ªâ t·ª´ GHN API d·ª±a tr√™n m√£ ƒë√£ l∆∞u
        String provinceName = ghnService.getProvinceName(donHang.getTinhThanh());
        String districtName = ghnService.getDistrictName(
                String.valueOf(donHang.getTinhThanh()), // Truy·ªÅn provinceId
                String.valueOf(donHang.getQuanHuyen())  // Truy·ªÅn districtId
        );

        String wardName = ghnService.getWardName(
                String.valueOf(donHang.getQuanHuyen()), // Truy·ªÅn districtId
                String.valueOf(donHang.getPhuongXa())   // Truy·ªÅn wardCode
        );

        // üîπ G√°n v√†o ƒë·ªëi t∆∞·ª£ng ƒë∆°n h√†ng
        donHang.setTinhThanh(provinceName);
        donHang.setQuanHuyen(districtName);
        donHang.setPhuongXa(wardName);

        // üîπ Truy·ªÅn d·ªØ li·ªáu ƒë·∫øn JSP
        List<LichSuTrangThaiDonHang> lichSu = lichSuTrangThaiService.findByDonHangId(id);
// üîπ L·∫•y th√¥ng tin thanh to√°n v√† g√°n v√†o ƒë∆°n h√†ng
        thanhToanService.findByDonHangId(donHang.getId()).ifPresent(donHang::setThanhToan);

        // üü¢ Truy·ªÅn v√†o view
        model.addAttribute("donHang", donHang);
        model.addAttribute("lichSuTrangThai", lichSu);
        model.addAttribute("backUrl", request.isUserInRole("ADMIN") ? "/api/donhang/admin/list" : "/api/donhang/danh-sach");

        return "chi-tiet-don-hang"; // Tr·∫£ v·ªÅ trang JSP
    }

    @GetMapping("/admin/list")
    public String listOrders(Model model,
                             @RequestParam(defaultValue = "1") int page,
                             @RequestParam(defaultValue = "") String keyword,
                             @RequestParam(required = false) String trangThai,
                             @RequestParam(required = false) String tuNgay,
                             @RequestParam(required = false) String denNgay,
                             @RequestParam(required = false) Double minGia,
                             @RequestParam(required = false) Double maxGia,
                             @RequestParam(required = false) String trangThaiThanhToan
    ) {

        List<DonHang> donHangs = donHangService.getAllOrders();

        // üîç T√¨m ki·∫øm theo keyword
        if (!keyword.isEmpty()) {
            donHangs = donHangs.stream()
                    .filter(dh ->
                            String.valueOf(dh.getId()).contains(keyword)
                                    || (dh.getUser() != null && dh.getUser().getHoTen() != null &&
                                    dh.getUser().getHoTen().toLowerCase().contains(keyword.toLowerCase()))
                                    || (dh.getSoDienThoaiNguoiNhan() != null && dh.getSoDienThoaiNguoiNhan().contains(keyword))
                    ).toList();
        }

        // üîé L·ªçc theo tr·∫°ng th√°i
        if (trangThai != null && !trangThai.isEmpty()) {
            donHangs = donHangs.stream()
                    .filter(dh -> dh.getTrangThai().name().equalsIgnoreCase(trangThai))
                    .toList();
        }

        // üìÖ L·ªçc theo ng√†y t·∫°o
        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd");
        if (tuNgay != null && !tuNgay.trim().isEmpty()) {
            LocalDateTime fromDate = LocalDate.parse(tuNgay.trim(), formatter).atStartOfDay();
            donHangs = donHangs.stream()
                    .filter(dh -> dh.getNgayDatHang().isAfter(fromDate) || dh.getNgayDatHang().isEqual(fromDate))
                    .toList();
        }

        if (denNgay != null && !denNgay.trim().isEmpty()) {
            LocalDateTime toDate = LocalDate.parse(denNgay.trim(), formatter).atTime(23, 59, 59);
            donHangs = donHangs.stream()
                    .filter(dh -> dh.getNgayDatHang().isBefore(toDate) || dh.getNgayDatHang().isEqual(toDate))
                    .toList();
        }


        // üí∞ L·ªçc theo kho·∫£ng gi√°
        if (minGia != null) {
            donHangs = donHangs.stream()
                    .filter(dh -> dh.getTongTien() >= minGia)
                    .toList();
        }

        if (maxGia != null) {
            donHangs = donHangs.stream()
                    .filter(dh -> dh.getTongTien() <= maxGia)
                    .toList();
        }
        if (trangThaiThanhToan != null && !trangThaiThanhToan.isEmpty()) {
            donHangs = donHangs.stream()
                    .filter(dh -> {
                        if (dh.getThanhToan() == null) return false;
                        return dh.getThanhToan().getTrangThaiThanhToan().name().equalsIgnoreCase(trangThaiThanhToan);
                    }).toList();
        }


        // üìÑ Ph√¢n trang
        int pageSize = 10;
        int totalItems = donHangs.size();
        int totalPages = (int) Math.ceil((double) totalItems / pageSize);
        int fromIndex = (page - 1) * pageSize;
        int toIndex = Math.min(fromIndex + pageSize, totalItems);
        List<DonHang> paginated = donHangs.subList(fromIndex, toIndex);

        // G√°n thanh to√°n
        for (DonHang dh : paginated) {
            thanhToanService.findByDonHangId(dh.getId()).ifPresent(dh::setThanhToan);
        }

        // üßæ G·ª≠i d·ªØ li·ªáu v·ªÅ view
        model.addAttribute("donHangs", paginated);
        model.addAttribute("currentPage", page);
        model.addAttribute("totalPages", totalPages);
        model.addAttribute("keyword", keyword);
        model.addAttribute("trangThai", trangThai);
        model.addAttribute("tuNgay", tuNgay);
        model.addAttribute("denNgay", denNgay);
        model.addAttribute("minGia", minGia);
        model.addAttribute("maxGia", maxGia);
        model.addAttribute("dsTrangThai", TrangThaiDonHang.values());
        model.addAttribute("trangThaiThanhToan", trangThaiThanhToan);


        return "admin/order-list";
    }


    @PostMapping("/admin/update-status/{id}")
    public String updateOrderStatus(@PathVariable Integer id,
                                    @RequestParam String trangThai,
                                    RedirectAttributes redirectAttributes) {

        DonHang donHang = donHangService.getOrderById(id)
                .orElseThrow(() -> new RuntimeException("‚ùå ƒê∆°n h√†ng kh√¥ng t·ªìn t·∫°i."));

        try {
            TrangThaiDonHang trangThaiMoi = TrangThaiDonHang.valueOf(trangThai);
            // N·∫øu tr·∫°ng th√°i m·ªõi l√† ƒê√É_HUY ‚Üí ho√†n l·∫°i s·ªë l∆∞·ª£ng t·ªìn cho s·∫£n ph·∫©m chi ti·∫øt
            if (trangThaiMoi == TrangThaiDonHang.DA_HUY) {
                List<ChiTietDonHang> chiTietList = donHang.getChiTietDonHangList();
                for (ChiTietDonHang chiTiet : chiTietList) {
                    SanPhamChiTiet spct = chiTiet.getSanPhamChiTiet();
                    spct.setSoLuongTon(spct.getSoLuongTon() + chiTiet.getSoLuong());
                    // L∆∞u l·∫°i s·∫£n ph·∫©m chi ti·∫øt (nh·ªõ inject SanPhamCTService v√†o)
                    sanPhamCTService.save(spct);
                }
            }


            // ‚ö†Ô∏è N·∫øu ƒë∆°n h√†ng ƒë√£ ho√†n t·∫•t ho·∫∑c h·ªßy th√¨ kh√¥ng cho c·∫≠p nh·∫≠t
            if (donHang.getTrangThai() == TrangThaiDonHang.HOAN_TAT ||
                    donHang.getTrangThai() == TrangThaiDonHang.DA_HUY) {

                redirectAttributes.addFlashAttribute("successMessage",
                        "‚ö†Ô∏è ƒê∆°n h√†ng ƒë√£ " + donHang.getTrangThai().getHienThi() + ". Kh√¥ng th·ªÉ thay ƒë·ªïi tr·∫°ng th√°i.");
                return "redirect:/api/donhang/admin/list";
            }

            // ‚ùå N·∫øu tr·∫°ng th√°i m·ªõi kh√¥ng h·ª£p l·ªá theo quy t·∫Øc chuy·ªÉn ƒë·ªïi
            if (!TrangThaiValidator.isHopLe(donHang.getTrangThai(), trangThaiMoi)) {
                redirectAttributes.addFlashAttribute("successMessage",
                        "‚ùå Kh√¥ng th·ªÉ chuy·ªÉn t·ª´ tr·∫°ng th√°i " + donHang.getTrangThai().getHienThi()
                                + " sang " + trangThaiMoi.getHienThi());
                return "redirect:/api/donhang/admin/list";
            }

            // ‚ö†Ô∏è N·∫øu kh√¥ng c√≥ thay ƒë·ªïi
            if (donHang.getTrangThai() == trangThaiMoi) {
                redirectAttributes.addFlashAttribute("successMessage",
                        "‚ö†Ô∏è Tr·∫°ng th√°i ƒë√£ l√† " + trangThaiMoi.getHienThi());
                return "redirect:/api/donhang/admin/list";
            }

            // ‚úÖ C·∫≠p nh·∫≠t tr·∫°ng th√°i ƒë∆°n h√†ng
            donHang.setTrangThai(trangThaiMoi);
            donHangService.updateOrder(donHang);

            // ‚úÖ Ghi l·∫°i l·ªãch s·ª≠ thay ƒë·ªïi
            lichSuTrangThaiService.ghiLichSu(donHang, trangThaiMoi, "Admin c·∫≠p nh·∫≠t tr·∫°ng th√°i");

            // ‚úÖ G·ª≠i email cho ng∆∞·ªùi d√πng
            emailService.sendOrderStatusUpdateEmail(
                    donHang.getUser().getEmail(),
                    id.toString(),
                    trangThaiMoi.getHienThi()
            );

            // ‚úÖ N·∫øu l√† COD v√† ƒë∆°n h√†ng ho√†n t·∫•t ‚Üí c·∫≠p nh·∫≠t tr·∫°ng th√°i thanh to√°n
            if (trangThaiMoi == TrangThaiDonHang.HOAN_TAT &&
                    PhuongThucCode.COD.equals(donHang.getPhuongThucThanhToan().getPhuongThucCode())) {

                ThanhToan thanhToan = thanhToanService.findByDonHangId(donHang.getId())
                        .orElseThrow(() -> new RuntimeException("‚ùå Kh√¥ng t√¨m th·∫•y b·∫£n ghi thanh to√°n."));

                if (thanhToan.getTrangThaiThanhToan() == TrangThaiThanhToan.CHUA_THANH_TOAN) {
                    thanhToan.setTrangThaiThanhToan(TrangThaiThanhToan.DA_THANH_TOAN);
                    thanhToan.setNgayThanhToan(LocalDateTime.now());
                    thanhToanService.save(thanhToan);
                }
            }

            redirectAttributes.addFlashAttribute("successMessage", "‚úÖ C·∫≠p nh·∫≠t tr·∫°ng th√°i th√†nh c√¥ng!");

        } catch (IllegalArgumentException e) {
            redirectAttributes.addFlashAttribute("successMessage", "‚ùå Tr·∫°ng th√°i kh√¥ng h·ª£p l·ªá!");
        }

        return "redirect:/api/donhang/admin/list";
    }


}
