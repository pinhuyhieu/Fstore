package com.example.fpoly.controller;

import com.example.fpoly.entity.Role;
import com.example.fpoly.entity.User;
import com.example.fpoly.service.UserService;
import com.example.fpoly.repository.RoleRepository;
import com.example.fpoly.repository.UserRepository;
import lombok.RequiredArgsConstructor;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import java.util.List;
import java.util.Set;

@Controller
@RequestMapping("/admin")
@RequiredArgsConstructor
public class UserController {

    private final UserRepository userRepository;
    private final RoleRepository roleRepository;
    private final UserService userService;

    // üîπ L·∫•y danh s√°ch ng∆∞·ªùi d√πng
    @GetMapping("/users")
    public String getUsers(Model model) {
        List<User> users = userRepository.findAll();
        model.addAttribute("users", users);
        return "user/list";  // Trang hi·ªÉn th·ªã danh s√°ch ng∆∞·ªùi d√πng
    }

    // üîπ L·∫•y danh s√°ch c√°c vai tr√≤
    @GetMapping("/roles")
    public String getRoles(Model model) {
        List<Role> roles = roleRepository.findAll();
        model.addAttribute("roles", roles);
        return "user/roles";  // Trang hi·ªÉn th·ªã danh s√°ch vai tr√≤
    }

    // üîπ Trang ch·ªânh s·ª≠a vai tr√≤ ng∆∞·ªùi d√πng
    @GetMapping("/edit-roles/{userId}")
    public String getEditRolesPage(@PathVariable Integer userId, Model model) {
        // L·∫•y ng∆∞·ªùi d√πng v√† c√°c vai tr√≤
        User user = userRepository.findById(userId)
                .orElseThrow(() -> new RuntimeException("‚ùå Ng∆∞·ªùi d√πng kh√¥ng t·ªìn t·∫°i"));
        List<Role> roles = roleRepository.findAll();

        // Th√™m ng∆∞·ªùi d√πng v√† vai tr√≤ v√†o model
        model.addAttribute("user", user);
        model.addAttribute("roles", roles);
        return "user/editUserRoles"; // Tr·∫£ v·ªÅ trang ch·ªânh s·ª≠a vai tr√≤ ng∆∞·ªùi d√πng
    }

    // üîπ C·∫≠p nh·∫≠t vai tr√≤ cho ng∆∞·ªùi d√πng
    @PostMapping("/update-roles")
    public String updateUserRoles(@RequestParam("userId") Integer userId,
                                  @RequestParam("roleId") Integer roleId,  // Ch·ªâ nh·∫≠n m·ªôt roleId
                                  RedirectAttributes redirectAttributes) {
        try {
            // C·∫≠p nh·∫≠t vai tr√≤ cho ng∆∞·ªùi d√πng
            userService.updateUserRoles(userId, roleId);  // G·ªçi service ƒë·ªÉ c·∫≠p nh·∫≠t vai tr√≤
            redirectAttributes.addFlashAttribute("successMessage", "‚úÖ C·∫≠p nh·∫≠t vai tr√≤ th√†nh c√¥ng!");
        } catch (Exception e) {
            redirectAttributes.addFlashAttribute("errorMessage", "‚ùå L·ªói khi c·∫≠p nh·∫≠t vai tr√≤!");
        }
        return "redirect:/admin/users";  // Quay l·∫°i danh s√°ch ng∆∞·ªùi d√πng
    }

}
